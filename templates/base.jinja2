<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Wazapp</title>
    <!--[if lt IE 9]>
    <script src="http://html5shiv.googlecode.com/svn/trunk/html5.js"></script>
    <![endif]-->
    <link href='http://fonts.googleapis.com/css?family=Bangers' rel='stylesheet' type='text/css'>
    <link rel="stylesheet" type="text/css" href="/static/default.css">
    <style type="text/css">
      #target {
        width: 345px;
      }
      html, body, #map-canvas { width: 100%; height: 100%; margin: 0; padding: 0; display: block}
    </style>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js"></script>
    <!-- <script type="text/javascript" src="https://maps.googleapis.com/maps/api/js"></script> -->
    <script src="https://maps.googleapis.com/maps/api/js?v=3.exp&signed_in=true&libraries=places"></script>
    <script src="static/jquery-2.1.3.min.js"></script>
    <script src="/static/mustache.min.js"></script>
  </head>
  <body>
    <header>
      <h1>Wazapp</h1>
    </header>
    <section id="content">
        <input id="pac-input" class="controls" type="text" placeholder="Search Box">
        <div id="map-canvas"></div>
        <div id="sidebar"></div>
    </section>
    <footer>
        <script type="text/javascript">
      function initialize() {
        var mapOptions = {
          mapTypeId: google.maps.MapTypeId.ROADMAP,
          streetViewControl: false,
          mapTypeControl: false
      //    center: { lat: 47.645101, lng: 237.658112},
      //    zoom: 13
      };

        var iconURL = 'https://maps.google.com/mapfiles/kml/shapes/info-i_maps.png';
        var iconSize = new google.maps.Size(20,34);
        var iconOrigin = new google.maps.Point(0,0);
        var iconAnchor = new google.maps.Point(10,34);
        var myIcon = {
          url: iconURL,
          size: iconSize, 
          origin: iconOrigin,
          anchor: iconAnchor
        };

        map = new google.maps.Map(document.getElementById('map-canvas'), mapOptions);

        map.data.loadGeoJson("/static/venue.json");
        
        // Create a marker for each place.
        var marker = new google.maps.Marker({
          map: map,
          icon: myIcon,
          title: 'test',
          position: new google.maps.LatLng(47.650101, 237.65112)
        });


        var styles = [
          {
            "featureType": "water",
            "stylers": [
              { "hue": "#0044ff" },
              { "lightness": -17 }
            ]
          },{
            "featureType": "poi.park",
            "stylers": [
              { "hue": "#3bff00" },
              { "lightness": -18 }
            ]
          },{
            featureType: "road",
            elementType: "geometry",
            stylers: [
              { lightness: 100 },
              { visibility: "simplified" }
            ]
          },{
            featureType: "road",
            elementType: "labels",
            stylers: [
              { visibility: "off" }
            ]
          }
        ];

        map.setOptions({styles: styles});

  var markers = [];
  // var map = new google.maps.Map(document.getElementById('map-canvas'), {
  //   mapTypeId: google.maps.MapTypeId.ROADMAP
  // });

  var defaultBounds = new google.maps.LatLngBounds(
      new google.maps.LatLng(47.620101, 237.645112),
      new google.maps.LatLng(47.657101, 237.670112));
  map.fitBounds(defaultBounds);

  // Create the search box and link it to the UI element.
  var input = /** @type {HTMLInputElement} */(
      document.getElementById('pac-input'));

  map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);

  var searchBox = new google.maps.places.SearchBox((input));

  // Listen for the event fired when the user selects an item from the
  // pick list. Retrieve the matching places for that item.
  google.maps.event.addListener(searchBox, 'places_changed', function() {
    var places = searchBox.getPlaces();

    if (places.length == 0) {
      return;
    }
    for (var i = 0, marker; marker = markers[i]; i++) {
      marker.setMap(null);
    }

    // For each place, get the icon, place name, and location.
    markers = [];
    var bounds = new google.maps.LatLngBounds();
    for (var i = 0, place; place = places[i]; i++) {
      var image = {
        url: place.icon,
        size: new google.maps.Size(71, 71),
        origin: new google.maps.Point(0, 0),
        anchor: new google.maps.Point(17, 34),
        scaledSize: new google.maps.Size(25, 25)
      };

      // Create a marker for each place.
      var marker = new google.maps.Marker({
        map: map,
        icon: image,
        title: place.name,
        position: place.geometry.location
      });

      markers.push(marker);

      bounds.extend(place.geometry.location);
    }

    map.fitBounds(bounds);
  });

  // Bias the SearchBox results towards places that are within the bounds of the
  // current map's viewport.
  google.maps.event.addListener(map, 'bounds_changed', function() {
    var bounds = map.getBounds();
    searchBox.setBounds(bounds);
  });


  google.maps.event.addDomListener(window, 'load', initialize);

        map.data.addListener('click', function(event) {
          // console.log(event.feature)
          var address = event.feature["k"]["address"].slice(0, -5);
      
          // TODO: add tweets to sidebar 
          $.ajax({
              url: '/gettweets',
              type: 'GET',
              dataType: 'json',
              data: {'address': address},
              success: function(result){
                $('#sidebar').html("");
                var venue_name = Mustache.to_html('<h2>[[venue]]</h2>', result);
                $('#sidebar').append(venue_name);
                var template = '<div class="tweet">'+
                                  '<span class="user">[[author_handle]]</span>'+
                                  '<span class="time">[[time]]</span>'+
                                  '<p class="content">[[content]]';


                var tweets = result.tweets;
                for(var tweet in tweets){
                  var html = Mustache.to_html(template, tweets[tweet]);
                  $('#sidebar').append(html);
                }
                // for (var tweet in tweets){
                //   console.log(tweet.content);
                // }
              },
          });

          $('#sidebar').addClass("sidebar--active");
        });
      }
      // Load geojson data
      google.maps.event.addDomListener(window, 'load', initialize);
    </script>
    </footer>
  </body>
</html>